// Code generated by MockGen. DO NOT EDIT.
// Source: ./service/url_service.go

// Package service is a generated GoMock package.
package service

import (
	reflect "reflect"

	model "github.com/AbdurrahmanA/short-url/model"
	service "github.com/AbdurrahmanA/short-url/service"
	gomock "github.com/golang/mock/gomock"
)

// MockURLRepo is a mock of URLRepo interface.
type MockURLRepo struct {
	ctrl     *gomock.Controller
	recorder *MockURLRepoMockRecorder
}

// MockURLRepoMockRecorder is the mock recorder for MockURLRepo.
type MockURLRepoMockRecorder struct {
	mock *MockURLRepo
}

// NewMockURLRepo creates a new mock instance.
func NewMockURLRepo(ctrl *gomock.Controller) *MockURLRepo {
	mock := &MockURLRepo{ctrl: ctrl}
	mock.recorder = &MockURLRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockURLRepo) EXPECT() *MockURLRepoMockRecorder {
	return m.recorder
}

// DeleteMany mocks base method.
func (m *MockURLRepo) DeleteMany(filter interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMany", filter)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMany indicates an expected call of DeleteMany.
func (mr *MockURLRepoMockRecorder) DeleteMany(filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMany", reflect.TypeOf((*MockURLRepo)(nil).DeleteMany), filter)
}

// Find mocks base method.
func (m *MockURLRepo) Find(filter interface{}) ([]model.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", filter)
	ret0, _ := ret[0].([]model.URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockURLRepoMockRecorder) Find(filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockURLRepo)(nil).Find), filter)
}

// FindOne mocks base method.
func (m *MockURLRepo) FindOne(url string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOne", url)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOne indicates an expected call of FindOne.
func (mr *MockURLRepoMockRecorder) FindOne(url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOne", reflect.TypeOf((*MockURLRepo)(nil).FindOne), url)
}

// Insert mocks base method.
func (m *MockURLRepo) Insert(original_url, owner_ip, short_url string) (*model.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", original_url, owner_ip, short_url)
	ret0, _ := ret[0].(*model.URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockURLRepoMockRecorder) Insert(original_url, owner_ip, short_url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockURLRepo)(nil).Insert), original_url, owner_ip, short_url)
}

// MockIURLService is a mock of IURLService interface.
type MockIURLService struct {
	ctrl     *gomock.Controller
	recorder *MockIURLServiceMockRecorder
}

// MockIURLServiceMockRecorder is the mock recorder for MockIURLService.
type MockIURLServiceMockRecorder struct {
	mock *MockIURLService
}

// NewMockIURLService creates a new mock instance.
func NewMockIURLService(ctrl *gomock.Controller) *MockIURLService {
	mock := &MockIURLService{ctrl: ctrl}
	mock.recorder = &MockIURLServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIURLService) EXPECT() *MockIURLServiceMockRecorder {
	return m.recorder
}

// DeleteMany mocks base method.
func (m *MockIURLService) DeleteMany(filter interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMany", filter)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMany indicates an expected call of DeleteMany.
func (mr *MockIURLServiceMockRecorder) DeleteMany(filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMany", reflect.TypeOf((*MockIURLService)(nil).DeleteMany), filter)
}

// Find mocks base method.
func (m *MockIURLService) Find(filter interface{}) ([]model.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", filter)
	ret0, _ := ret[0].([]model.URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockIURLServiceMockRecorder) Find(filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockIURLService)(nil).Find), filter)
}

// FindOneWithShortURL mocks base method.
func (m *MockIURLService) FindOneWithShortURL(shortURL string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneWithShortURL", shortURL)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneWithShortURL indicates an expected call of FindOneWithShortURL.
func (mr *MockIURLServiceMockRecorder) FindOneWithShortURL(shortURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneWithShortURL", reflect.TypeOf((*MockIURLService)(nil).FindOneWithShortURL), shortURL)
}

// Insert mocks base method.
func (m *MockIURLService) Insert(url, ip string, createShortUrl service.CreateShortUrlFunc) (*model.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", url, ip, createShortUrl)
	ret0, _ := ret[0].(*model.URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockIURLServiceMockRecorder) Insert(url, ip, createShortUrl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockIURLService)(nil).Insert), url, ip, createShortUrl)
}
